diff --git a/server/app/cfinterface.py b/server/app/cfinterface.py
index f132383..91416d2 100644
--- a/server/app/cfinterface.py
+++ b/server/app/cfinterface.py
@@ -1,151 +1,151 @@
 from models import Environment
 from server import app, db
 
-import cfstack
-import logging
 import os
 import re
-from collections import namedtuple
-from boto import cloudformation
+from boto import cloudformation, ec2
 
 
 cf_statuses = {
     'CREATE_IN_PROGRESS': 2,
     'CREATE_FAILED': 0,
     'CREATE_COMPLETE': 1,
-    'ROLLBACK_IN_PROGRESS': 5,
+    'ROLLBACK_IN_PROGRESS': 0,
     'ROLLBACK_FAILED': 0,
-    'ROLLBACK_COMPLETE': 5,
+    'ROLLBACK_COMPLETE': 0,
     'DELETE_IN_PROGRESS': 3,
     'DELETE_FAILED': 0,
     'DELETE_COMPLETE': 1,
     'UPDATE_IN_PROGRESS': 4,
     'UPDATE_COMPLETE_CLEANUP_IN_PROGRESS': 4,
     'UPDATE_COMPLETE': 1,
     'UPDATE_ROLLBACK_IN_PROGRESS': 4,
     'UPDATE_ROLLBACK_FAILED': 0,
     'UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS': 4,
     'UPDATE_ROLLBACK_COMPLETE': 1,
     'UPDATE_FAILED': 0
 }
 
+templates_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)), '../cftemplates/')
+templates = {
+    'static': os.path.join(templates_dir + 'static.json'),
+    'wordpress': os.path.join(templates_dir + 'wordpress.json')
+}
+
 
 class Stack(object):
 
     """
-    Interface for interacting with Giulio's cf library.
+    Interface for interacting with cf via boto.
     Provides create, delete, modify and check methods.
 
     Methods in this class do *not* perform any local DB commits.
     """
 
     def __init__(self, name):
 
         # fetching from DB so we have all the data we might need
         self.env = Environment.query.filter_by(env_name=name).first()
 
-        self.args = {}
         self.region = app.config['AWS_REGION']
+        self.cfconn = cloudformation.connect_to_region(self.region)
+        self.stack_name = 's-' + self.env.env_name + '-vpc'
 
-        self.args['yamlfile'] = os.path.abspath(os.path.dirname(
-            os.path.abspath(__file__)) + "/../cftemplates") + "/config.yaml"
-        self.args['force'] = True
-
-        self.obj = namedtuple('Struct', self.args.keys())(*self.args.values())
-
-        logging.basicConfig()
-        logger = logging.getLogger(__name__)
-
-        os.environ['customer'] = self.env.env_name
-        os.environ['num_instances'] = str(self.env.num_instances)
-        os.environ['company_name'] = self.env.company_name
-
-        self.the_mega_stack = cfstack.MegaStack(self.obj)
-        self.the_mega_stack.sort_stacks_by_deps()
-        self.the_mega_stack.stop_loop_event()
-
-    def create(self):
+    def create(self, template):
         """ Initiates stack creation. Returns status 2. """
         try:
-            self.the_mega_stack.create()
+            template_body = open(templates[template], 'r').read()
+            self.cfconn.create_stack(
+                stack_name=self.stack_name,
+                template_body=template_body,
+                parameters=[
+                    ("Project", self.env.env_name),
+                    ("Company", self.env.company_name),
+                    ("WebServerCapacity", self.env.num_instances)]
+            )
             self.env.status = 2
             return self.env.status
 
         except Exception, e:
             print e
             self.env.status = 0
             return self.env.status
             pass
 
     def delete(self):
         """ Initiates stack deletion. Returns status 3. """
         try:
-            self.the_mega_stack.delete()
+            self.cfconn.delete_stack(self.stack_name)
             self.env.status = 3
             return self.env.status
 
         except Exception, e:
             print e
             self.env.status = 0
             return self.env.status
             pass
 
     def retrieve_log(self):
         """ Fetches logs for a given stack. Returns an array of strings. """
-        cf = cloudformation.connect_to_region(self.region)
         lines = []
-        for event in cf.describe_stack_events('s-' + self.env.env_name + '-vpc'):
+        for event in self.cfconn.describe_stack_events('s-' + self.env.env_name + '-vpc'):
             lines.append("[%s] %s %s %s" % (
-                    event.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
-                    event.resource_status,
-                    event.resource_type,
-                    event.logical_resource_id))
+                event.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
+                event.resource_status,
+                event.resource_type,
+                event.logical_resource_id))
         return '\n'.join(lines)
 
 
 class Stacks(Stack):
+
     """
     Stacks class provides an interface to CF when interacting with group
     of environments. This class connects to CF via Boto directly, not through
     Giulio's package.
 
     Methods in this class *do* perform local DB commits.
     """
 
     def __init__(self):
         self.region = app.config['AWS_REGION']
         self.cfconn = cloudformation.connect_to_region(self.region)
         self.events = self.cfconn.describe_stacks()
 
     def check(self):
         """
         Checks the status of all CF stacks. Disregards stacks created by other users (i.e., not
         present in the local DB). Sets status variables in the local DB. Drops stacks that were
         successfully deleted
         """
         try:
             self.cf_stacks = []
             for i in self.events:
                 # ACHTUNG! this removes the 's-' prefix and '-vpc' suffix and is HARDCODED
                 # should we change the naming convention it will all go to hell!
                 self.stack = str(i.stack_name)[2:][:-4]
                 self.cf_stacks.append(self.stack)
                 self.env = Environment.query.filter_by(env_name=self.stack).first()
 
                 # to account for the stacks created by others and not present in our db:
                 if self.env is None:
                     continue
                 # the above check can probably be removed if we set it up in prod
                 self.env.status = cf_statuses[i.stack_status]
                 if cf_statuses[i.stack_status] == 1:
                     self.urlregexp = re.search(ur'http[^\s]+com', str(i.outputs[0]))
                     self.env.url = self.urlregexp.group(0)
+                    self.ec2conn = ec2.connect_to_region(self.region)
+                    self.filter = {"tag:Name": "WEB-ASG-" + self.env.env_name}
+                    self.reservations = self.ec2conn.get_all_reservations(filters=self.filter)
+                    self.instances = self.reservations[0].instances
+                    self.inst = self.instances[0]
+                    self.env.ip = str(self.inst.ip_address)
                 db.session.commit()
             self.envs = Environment.query.all()
             for env in self.envs:
                 if env.env_name not in self.cf_stacks:
                     db.session.delete(env)
             db.session.commit()
-            print self.cf_stacks
         except Exception, e:
             print e
