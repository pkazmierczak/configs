set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundles!
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'bling/vim-airline'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'sjl/gundo.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'jonathanfilip/vim-lucius'
Plugin 'altercation/vim-colors-solarized'
Plugin 'junegunn/goyo.vim'
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
Plugin 'kshenoy/vim-signature'
Plugin 'kien/ctrlp.vim'
Plugin 'mileszs/ack.vim'
Plugin 'klen/python-mode'
" Clojure
Plugin 'guns/vim-clojure-static'
Plugin 'guns/vim-clojure-highlight'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'tpope/vim-fireplace'
Plugin 'tpope/vim-leiningen'
Plugin 'vim-scripts/paredit.vim'

call vundle#end()            " required
filetype plugin indent on    " required

set number
set vb t_vb=
set smartindent
set clipboard=unnamed        " yank and paste with the system clipboard
set guioptions-=L            " no scrollbars
set guioptions-=r            " no scrollbars

set ts=2 sts=2 sw=2 expandtab tw=72
if has("mac")
	set guifont=Source\ Code\ Pro\ for\ Powerline:h13
else
	set guifont=Inconsolata\ 11
endif
set laststatus=2
syntax on

set autochdir

" I think this is better for latex
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

nnoremap U :GundoToggle<cr>
nnoremap <F5> :buffers<CR>:buffer<Space>
nnoremap <F7> :Goyo<CR>

" fugitive!
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gp :Git push<cr>

" rainbows!
nnoremap <leader>rr :RainbowParenthesesToggle<cr>

" insert empty line without entering insert mode
" http://vim.wikia.com/wiki/Insert_newline_without_entering_insert_mode
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

" colorscheme lucius 
" let g:lucius_style = 'light'
" nnoremap <F6> :call ToggleColor()<cr>
" 
" function! ToggleColor()
"     if (g:lucius_style == 'light')
"         LuciusDark
"     else
"         LuciusLight
"     endif
" endfunction

set background=light
" let g:solarized_contrast = 'low'
colorscheme solarized
" Toggle 'night mode'
call togglebg#map("<F6>")

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

au FileType * exec("setlocal dictionary+=".$HOME."/.vim/dictionaries/".expand('<amatch>'))
set complete+=k

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'
let g:airline#extensions#whitespace#enabled = 0

" LaTeX
set nospell
autocmd BufNewFile,BufRead *.tex set spell
set conceallevel=0
let g:tex_conceal= 'adgms'
let g:LatexBox_latexmk_options = "-pdf"
let g:LatexBox_latexmk_async = 1
let g:LatexBox_fold_toc = 0
nmap <buffer> <F5>  <Plug>LatexChangeEnv
vmap <buffer> <F7>  <Plug>LatexWrapSelection
let g:LatexBox_quickfix = 0
if has("mac")
	let g:LatexBox_viewer = "open"
else
	let g:LatexBox_viewer = "xdg-open"
endif
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': ['tex'] }
let g:syntastic_quiet_messages = { "level": "warnings",
                                 \ "type":  "style",}


" NerdTree
map <C-n> :NERDTreeToggle<CR>

