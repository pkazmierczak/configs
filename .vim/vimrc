set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

Plug 'gmarik/Vundle.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired' "for bracket mappings
Plug 'tpope/vim-repeat'
Plug 'airblade/vim-gitgutter'
Plug 'airblade/vim-rooter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'
Plug 'sjl/gundo.vim'
Plug 'kshenoy/vim-signature' "for displaying marks
Plug 'ctrlpvim/ctrlp.vim'
function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.py
  endif
endfunction
Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
Plug 'mhinz/vim-startify'
Plug 'vim-syntastic/syntastic'
" Python
Plug 'python-mode/python-mode', { 'for': 'python' }
Plug 'google/yapf', { 'for': 'python' }
Plug 'timothycrosley/isort', { 'for': 'python' }
" Go
Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoInstallBinaries' }
Plug 'garyburd/go-explorer', { 'for': 'go' }
" colors
Plug 'jonathanfilip/vim-lucius'
Plug 'altercation/vim-colors-solarized'

call plug#end()            " required

set number
set vb t_vb=
set so=5
set smartindent
set clipboard=unnamed        " yank and paste with the system clipboard
set guioptions-=L            " no scrollbars
set guioptions-=r            " no scrollbars
set wildmenu
set wildmode=longest:full,full

if has("mac")
	set guifont=Source\ Code\ Pro\ for\ Powerline:h13
else
	set guifont=Inconsolata\ 11
endif


set ts=2 sts=2 sw=2 expandtab tw=72
set laststatus=2
syntax on

set autochdir

nnoremap U :GundoToggle<cr>

" fugitive!
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gp :Git push<cr>

" ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
nnoremap <C-;> :Ack

" vim-rooter
let g:rooter_silent_chdir = 1

" Python
let g:pymode_python = 'python3'
let g:pymode_folding = 0
let g:pymode_rope = 1
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_autoimport = 0
let g:pymode_rope_goto_definition_bind = "<C-]>"
let g:pymode_rope_goto_definition_cmd = 'e'
let g:pymode_lint_checkers = ['pylint']
let g:pymode_lint_ignore = "E501,E402,W"
au FileType python nmap <leader>pa :PymodeLintAuto<cr>
autocmd FileType python nnoremap <LocalLeader>= :0,$!yapf<CR>
autocmd FileType python nnoremap <LocalLeader>i :!isort %<CR><CR>

" Golang
let $GOPATH = '/Users/piotr/go'
let g:go_fmt_command = "goimports"
let g:go_highlight_types = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
" if !exists("autocommands_loaded")
"   let autocommands_loaded = 1
"   autocmd BufWritePost *.go :GoBuild
" endif
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <leader>l <Plug>(go-lint)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
let g:syntastic_go_checkers = ['golint', 'vet', 'errcheck']
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_autosave = 1
" let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" insert empty line without entering insert mode
" http://vim.wikia.com/wiki/Insert_newline_without_entering_insert_mode
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

" q destroys buffer
nmap q :bd<cr>

colorscheme lucius
let g:lucius_style = 'light'
nnoremap <F6> :call ToggleColor()<cr>

function! ToggleColor()
    if (g:lucius_style == 'light')
        LuciusDark
        AirlineRefresh
    else
        LuciusLight
        AirlineRefresh
    endif
endfunction

" set background=light
" " let g:solarized_contrast = 'low'
" colorscheme solarized
" " Toggle 'night mode'
" call togglebg#map("<F6>")

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

au FileType * exec("setlocal dictionary+=".$HOME."/.vim/dictionaries/".expand('<amatch>'))
set complete+=k

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='lucius'
let g:airline#extensions#whitespace#enabled = 0

" NerdTree
map <C-n> :NERDTreeFind<CR>
" Tagbar
nmap <F8> :TagbarToggle<CR>
" YCM
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'unite' : 1,
      \ 'text' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1
      \}

" ctrlp
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nmap <C-m> :CtrlPMRUFiles<CR>
