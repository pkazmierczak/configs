set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundles!
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired' "for bracket mappings
Plugin 'tpope/vim-repeat'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'sjl/gundo.vim'
Plugin 'kshenoy/vim-signature' "for displaying marks
Plugin 'kien/ctrlp.vim'
Plugin 'rking/ag.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'klen/python-mode'
Plugin 'jmcantrell/vim-virtualenv'

" Golang
Plugin 'fatih/vim-go'
Plugin 'garyburd/go-explorer'

" colors
Plugin 'jonathanfilip/vim-lucius'
Plugin 'altercation/vim-colors-solarized'

call vundle#end()            " required
filetype plugin indent on    " required

set number
set vb t_vb=
set smartindent
set clipboard=unnamed        " yank and paste with the system clipboard
set guioptions-=L            " no scrollbars
set guioptions-=r            " no scrollbars

set ts=2 sts=2 sw=2 expandtab tw=72
if has("mac")
	set guifont=Source\ Code\ Pro\ for\ Powerline:h13
else
	set guifont=Inconsolata\ 11
endif
set laststatus=2
syntax on

set autochdir

nnoremap U :GundoToggle<cr>
nnoremap <F5> :buffers<CR>:buffer<Space>

" fugitive!
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gp :Git push<cr>

" Python
let g:syntastic_python_checkers = []
let g:pymode_python = 'python'
let g:pymode_rope = 0
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_autoimport = 0
let g:pymode_options_max_line_length = 100
let g:pymode_lint_options_pep8 =
        \ {'max_line_length': 100}
" let g:pymode_lint_ignore = "E501,W"
au FileType python nmap <leader>pa :PymodeLintAuto<cr>

" Golang
let $GOPATH = '/Users/piotr/devel/go-workspace'
let g:go_fmt_command = "goimports"
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" insert empty line without entering insert mode
" http://vim.wikia.com/wiki/Insert_newline_without_entering_insert_mode
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

" q destroys buffer
nmap q :bd<cr>

colorscheme lucius 
let g:lucius_style = 'light'
nnoremap <F6> :call ToggleColor()<cr>

function! ToggleColor()
    if (g:lucius_style == 'light')
        LuciusDark
        AirlineRefresh
    else
        LuciusLight
        AirlineRefresh
    endif
endfunction

" set background=light
" " let g:solarized_contrast = 'low'
" colorscheme solarized
" " Toggle 'night mode'
" call togglebg#map("<F6>")

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

au FileType * exec("setlocal dictionary+=".$HOME."/.vim/dictionaries/".expand('<amatch>'))
set complete+=k

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='lucius'
let g:airline#extensions#whitespace#enabled = 0

" NerdTree
map <C-n> :NERDTreeToggle<CR>
" Tagbar
nmap <F8> :TagbarToggle<CR>
" YCM
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'unite' : 1,
      \ 'text' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1
      \}
" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nmap <C-m> :CtrlPMRUFiles<CR>

